#!/usr/bin/env ruby

require 'optparse'
require 'pathname'

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: #{__FILE__} [options] directory rsync_destination"

  opts.on('-n', '--sourcename NAME', 'Source name') { |v| options[:source_name] = v }
  opts.on('-h', '--sourcehost HOST', 'Source host') { |v| options[:source_host] = v }
  opts.on('-p', '--sourceport PORT', 'Source port') { |v| options[:source_port] = v }
  opts.on('-s') { |v| options[:sync] == v }

end.parse!


ignored = [
	'.git',
	'.idea',
	'.env',
	'log',
	'tmp',
	'.*___',
	'node_modules',
	'config/database.yml',
	'public',
	'target'
]

def sync(from, to, ignored)
	system("rsync", "-v", "-e", "ssh", "--delete", "--force", "-raz", *ignored.map { |ignore| ["--exclude", ignore] }.flatten, from, to) || exit(111)
end

if ARGV.length == 2
	source_dir = ARGV[0]
	destination = ARGV[1]
	batch_marker = "NoOp"

	sync(source_dir, destination, ignored)

	fswatch = IO.popen(["fswatch", "-l", "0.3", "--batch-marker", *ignored.map { |ignore| ["--exclude", ignore] }.flatten, source_dir])
	while true
		new_files = []

		while (new_file = fswatch.gets.chomp) != batch_marker
			new_files << new_file
		end

		# destination_file = Pathname.new(source_file).relative_path_from(Pathname.new(File.absolute_path(source_dir))).to_s

		# puts "#{source_file} -> #{destination_file}"
		sync(source_dir, destination, ignored)

		File.open("/tmp/watch-copy", "a") do |out|
			out.write(new_files)
		end
	end
end